# This is the main GitHub Actions workflow file.
name: Twitter Bot Scheduler

on:
  # This makes the workflow manually runnable from the Actions tab.
  # The "schedule" trigger is commented out for now while we test.
  workflow_dispatch:

  # To enable the hourly schedule later, just remove the '#' from the next two lines.
  # schedule:
  #   - cron: '0 * * * *'

# These permissions are required for the workflow to commit the updated
# login session data back to your repository.
permissions:
  contents: write

jobs:
  run-twitter-bots:
    runs-on: ubuntu-latest
    
    # These environment variables make your secrets available to all steps in this job.
    # IMPORTANT: You must create these secrets in your repository settings.
    # Go to: Repo > Settings > Secrets and variables > Actions > New repository secret
    env:
      # Supabase Credentials
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}

      # --- Twitter Credentials for each bot ---
      # Formula Bot
      FORMULA_EMAIL: ${{ secrets.FORMULA_EMAIL }}
      FORMULA_USERNAME: ${{ secrets.FORMULA_USERNAME }}
      FORMULA_PASSWORD: ${{ secrets.FORMULA_PASSWORD }}

      # Tech Bot
      TECH_EMAIL: ${{ secrets.TECH_EMAIL }}
      TECH_USERNAME: ${{ secrets.TECH_USERNAME }}
      TECH_PASSWORD: ${{ secrets.TECH_PASSWORD }}

      # Hollywood Bot
      HOLLYWOOD_EMAIL: ${{ secrets.HOLLYWOOD_EMAIL }}
      HOLLYWOOD_USERNAME: ${{ secrets.HOLLYWOOD_USERNAME }}
      HOLLYWOOD_PASSWORD: ${{ secrets.HOLLYWOOD_PASSWORD }}
      
      # Movies Bot
      MOVIES_EMAIL: ${{ secrets.MOVIES_EMAIL }}
      MOVIES_USERNAME: ${{ secrets.MOVIES_USERNAME }}
      MOVIES_PASSWORD: ${{ secrets.MOVIES_PASSWORD }}

      # Unews Bot
      UNEWS_EMAIL: ${{ secrets.UNEWS_EMAIL }}
      UNEWS_USERNAME: ${{ secrets.UNEWS_USERNAME }}
      UNEWS_PASSWORD: ${{ secrets.UNEWS_PASSWORD }}

      # News Bot
      NEWS_EMAIL: ${{ secrets.NEWS_EMAIL }}
      NEWS_USERNAME: ${{ secrets.NEWS_USERNAME }}
      NEWS_PASSWORD: ${{ secrets.NEWS_PASSWORD }}

    steps:
      # Step 1: Check out the repository's code so the runner can access it.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up the Python environment.
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Step 3: Install all Python packages listed in your requirements.txt file.
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Install the Chromium browser needed by Playwright.
      - name: Install Playwright browsers
        run: playwright install chromium

      # Step 5: Run the main controller script, which is the brain of the operation.
      - name: Run Main Bot Controller
        run: python main_controller.py

      # Step 6: Commit and push any updated login data back to the repository.
      - name: Commit updated session data
        run: |
          # Configure git with a bot name and email for the commit.
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'github-actions-bot@github.com'
          
          # Check if there are any changes in any of the login_data directories.
          if ! git diff --quiet -- '*/login_data/'; then
            echo "Changes detected in login data. Committing..."
            # Add all changed login_data folders.
            git add '*/login_data/'
            # Commit the changes. The [skip ci] tag prevents this commit from re-triggering the workflow.
            git commit -m "chore: Update browser session data [skip ci]"
            git push
          else
            echo "No changes in login data. Nothing to commit."
          fi
